/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package playground

fun fib(i: Int): Int {
    tailrec fun recur(ii: Int, curr: Int, next: Int): Int =
        if (ii == 0) curr
        else recur(ii - 1, next, curr + next)
    return recur(i, 0, 1)
}

val <T> List<T>.tail: List<T>
    get() = drop(1)
val <T> List<T>.head: T
    get() = first()

fun <A> isSorted(aa: List<A>, order: (A, A) -> Boolean): Boolean {
    tailrec fun recur(aa: List<A>): Boolean =
        if (aa.isEmpty() || aa.size == 1) true
        else if (!order(aa.head, aa.tail.head)) false
        else recur(aa.tail)
    return recur(aa)
}

fun <A, B, C> partial(a: A, f: (A, B) -> C): (B) -> C = { b: B ->
    f(a, b)
}

fun <A, B, C> curry(f: (A, B) -> C): (A) -> (B) -> C = { a ->
    { b ->
        f(a, b)
    }
}

fun <A, B, C> uncurry(f: (A) -> (B) -> C): (A, B) -> C = { a, b -> f(a)(b) }

fun <A, B, C> compose(f: (B) -> C, g: (A) -> B) = { a: A ->
    f(g(a))
}


fun main() {
    println(fib(10))
    println(isSorted(mutableListOf(3, 2, 1)) { x, y -> x > y })
//    println(partial(1) { b: Int, c: Int -> b + c }(2))
    println(curry { x: Int, y: Int -> x + y }(1)(2))
    println(uncurry { x: Int -> { y: Int -> x + y } }(1, 2))
    println(compose({ x: Int -> x * 3 }, { y: Int -> y * 4 })(2))
}
